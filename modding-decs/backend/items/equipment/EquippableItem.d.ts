import { GameState } from "../../GameState";
import { Resource } from "../../Resources";
import { ActionEffect } from "../../action/Action";
import { CombatStat } from "../../exploration/CombatStats";
import { TransformationTags } from "../../transformation/TransformationTags";
import { EquipmentSlot } from "../Equipment";
import { Item, ItemAction, ItemParams, ItemTag } from "../Item";
export declare abstract class EquippableItem extends Item {
    abstract getSlot(): EquipmentSlot;
    getTags(): ItemTag[];
    getExtraSlots(): EquipmentSlot[];
    getEquippedParams(state: GameState): ItemParams | undefined;
    getEquippedItemEffect(state: GameState, onlyId?: string): Record<string, number>;
    getPrimaryAction(state: GameState, params: ItemParams): ItemAction | undefined;
    getAttackBonusBase(params: ItemParams): number;
    attackTags: CombatStat[];
    getDefenseBonusBase(params: ItemParams): number;
    defenseTags: CombatStat[];
    getMaxHPBonusBase(params: ItemParams): number;
    maxHPTags: CombatStat[];
    getManaRegenBonusBase(params: ItemParams): number;
    manaRegenTags: (TransformationTags | Resource)[];
    getMaxManaBonusBase(params: ItemParams): number;
    maxManaTags: (TransformationTags | Resource)[];
    getAttackDelayBonusRatioBase(params: ItemParams): number;
    attackDelayTags: CombatStat[];
    getPlayerAccuracyBonusBase(params: ItemParams): number;
    accuracyTags: CombatStat[];
    getPlayerDodgeBonusBase(params: ItemParams): number;
    dodgeTags: CombatStat[];
    getPlayerCritChanceBonusBase(params: ItemParams): number;
    critTags: CombatStat[];
    protected getBaseExtraItemEffects(params: ItemParams): Record<string, ActionEffect>;
    protected getBaseItemEffects(params: ItemParams): Record<string, ActionEffect>;
    getEffect(state: GameState, params: ItemParams): string | undefined;
    getEffectExtra(state: GameState, params: ItemParams): string | undefined;
    getEffectBase(state: GameState, params: ItemParams): string | undefined;
    isEquippedWithAnyParams(state: GameState): boolean;
    isItemQualityValid(params: ItemParams): boolean;
    isEquippable(): boolean;
    shouldCombineUnderAutoCombineAll(): boolean;
}
export declare function getEquippedAmountOfItem(item: Item, state: GameState): number;
export declare function getTotalAmountOfItemIncludingEquipped(item: Item, state: GameState): number;
