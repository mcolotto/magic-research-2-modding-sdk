import { SpellElementType } from "./backend/spells/Elements";
declare function getThemeByElementAndDarkModeUnmemoized(element: SpellElementType | undefined, isDark: boolean, lowContrast: boolean): {
    colors: {
        error: string;
        hpBarForeground: string;
        hpBarBackground: string;
        background: any;
        primary: any;
        onPrimary: any;
        primaryContainer: string;
        secondary: string;
        secondaryContainer: string;
        tertiary: string;
        tertiaryContainer: string;
        surface: string;
        surfaceVariant: string;
        surfaceDisabled: string;
        errorContainer: string;
        onPrimaryContainer: string;
        onSecondary: string;
        onSecondaryContainer: string;
        onTertiary: string;
        onTertiaryContainer: string;
        onSurface: string;
        onSurfaceVariant: string;
        onSurfaceDisabled: string;
        onError: string;
        onErrorContainer: string;
        onBackground: string;
        outline: string;
        outlineVariant: string;
        inverseSurface: string;
        inverseOnSurface: string;
        inversePrimary: string;
        shadow: string;
        scrim: string;
        backdrop: string;
        elevation: import("react-native-paper/lib/typescript/src/types").MD3ElevationColors;
    } | {
        error: string;
        hpBarForeground: string;
        hpBarBackground: string;
        background: any;
        primary: string;
        onPrimary: string;
        primaryContainer: string;
        secondary: string;
        secondaryContainer: string;
        tertiary: string;
        tertiaryContainer: string;
        surface: string;
        surfaceVariant: string;
        surfaceDisabled: string;
        errorContainer: string;
        onPrimaryContainer: string;
        onSecondary: string;
        onSecondaryContainer: string;
        onTertiary: string;
        onTertiaryContainer: string;
        onSurface: string;
        onSurfaceVariant: string;
        onSurfaceDisabled: string;
        onError: string;
        onErrorContainer: string;
        onBackground: string;
        outline: string;
        outlineVariant: string;
        inverseSurface: string;
        inverseOnSurface: string;
        inversePrimary: string;
        shadow: string;
        scrim: string;
        backdrop: string;
        elevation: import("react-native-paper/lib/typescript/src/types").MD3ElevationColors;
    };
    fonts: {
        labelSmall: {
            letterSpacing: number;
            fontFamily: string;
            fontWeight: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
            lineHeight: number;
            fontSize: number;
            fontStyle?: "normal" | "italic";
        };
        labelMedium: {
            letterSpacing: number;
            fontFamily: string;
            fontWeight: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
            lineHeight: number;
            fontSize: number;
            fontStyle?: "normal" | "italic";
        };
        bodySmall: {
            letterSpacing: number;
            fontFamily: string;
            fontWeight: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
            lineHeight: number;
            fontSize: number;
            fontStyle?: "normal" | "italic";
        };
        bodyMedium: {
            letterSpacing: number;
            fontFamily: string;
            fontWeight: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900";
            lineHeight: number;
            fontSize: number;
            fontStyle?: "normal" | "italic";
        };
        displayLarge: import("react-native-paper/lib/typescript/src/types").MD3Type;
        displayMedium: import("react-native-paper/lib/typescript/src/types").MD3Type;
        displaySmall: import("react-native-paper/lib/typescript/src/types").MD3Type;
        headlineLarge: import("react-native-paper/lib/typescript/src/types").MD3Type;
        headlineMedium: import("react-native-paper/lib/typescript/src/types").MD3Type;
        headlineSmall: import("react-native-paper/lib/typescript/src/types").MD3Type;
        titleLarge: import("react-native-paper/lib/typescript/src/types").MD3Type;
        titleMedium: import("react-native-paper/lib/typescript/src/types").MD3Type;
        titleSmall: import("react-native-paper/lib/typescript/src/types").MD3Type;
        labelLarge: import("react-native-paper/lib/typescript/src/types").MD3Type;
        bodyLarge: import("react-native-paper/lib/typescript/src/types").MD3Type;
        default: Omit<import("react-native-paper/lib/typescript/src/types").MD3Type, "lineHeight" | "fontSize">;
    };
    roundness: number;
    dark: boolean;
    mode?: "adaptive" | "exact";
    animation: {
        scale: number;
        defaultAnimationDuration?: number;
    };
    version: 3;
    isV3: true;
};
declare const getThemeByElementAndDarkMode: typeof getThemeByElementAndDarkModeUnmemoized;
export declare const getThemeWithOverriddenOnError: (theme: any, onError: any) => any;
export { getThemeByElementAndDarkMode };
